git log
git log --pretty=oneline
git reflog
git add fileName
git commit -m "说明"
git checkout -- fileName
git reset HEAD -- fileName
git reset 版本号 -- fileName
git diff fileName
git diff HEAD -- fileName
git status
git rm fileName

git remote add origin git@github.com:GitHub的账户名/项目名.git
git remote add origin git@server-name:path/repo-name.git; 关联一个远程库时必须给远程库指定一个名字，origin是默认习惯命名
git push -u origin master  是第一次推送master分支的所有内容
git push origin master     推送最新修改
git remote -v
git remote rm origin

git branch 查看当前分支
git checkout -b dev  创建dev分支，并切换到dev分支
                     相当于这两命令：
                     git branch dev
                     git checkou dev
git checkout master  切换回master分支
git merge dev    强制将dev分支合并到master分支上  Fast forward  会丢失分支信息
git branch -d dev  删除dev分支

git switch -c dev  创建dev分支，并切换到dev分支
git switch master  切换到已有的master分支
git branch         查看分支
git branch <name>  创建分支
git switch <name>  切换分支
git switch -c <name> 创建+切换分支
git merge <name>   合并某分支到当前分支 （所以合并前要先切换分支）
git branch -d <name> 删除分支

git log --graph --pretty=oneline --abbrev-commit
git log --graph --pretty=oneline                        查看日志

git merge --no-ff -m "合并分支，禁用Fast forward，并添加说明" dev
git merge --no-ff -m "情况说明 信息内容" <name>                     强制禁用Fast forward模式，Git会在merge时生成一个新的commit，这样从分支历史上就可以看出分支信息

git stash             可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作，此时用git status来查看工作区，就是干净的。这时可以放心地创建新的分支来修复BUG
git stash list        可以查看刚才保存的N个工作现场
git stash apply       恢复工作现场   stash内容并不删除
git stash apply stash@{0} 多个工作现场，恢复指定的stash
git stash drop        上面恢复时并不删除，可以用这个命令来删除工作现场
git stash pop         恢复的同时把stash内容也删除了

git cherry-pick <commit 编号>  复制一个特定的提交到当前分支 避免重复劳动

git remote                   查看远程库信息
git remote -v                查看远程库详细信息，显示抓取fetch和推送push的地址，没有权限则看不到地址。
git push origin master       推送master分支，把该分支上所有本地提交推送到远程库。推送时要指定本地分支，这样Git就会把该分支推送到远程库对应的远程分支上
git push origin dev          要推送其他分支，比如 dev
